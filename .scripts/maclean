#!/usr/bin/env bash
#
# maclean
#
# A script to automate some relatively safe cleaning activities
#
# <3 cscs <3
#

set -eu

## Begin Script ##

EXIT_CODE=0

## Exit if Root ##

if [[ "$EUID" = 0 ]]; then
    echo -ne "\nPlease do not run this script as root or with sudo.\n\n"
    exit
fi

## Help Function ##

_mc_help() {
    echo
    echo " maclean"
    echo
    echo " A script to automate some relatively safe cleaning activities"
    echo
    echo " Usage: maclean [options]"
    echo
    echo " Extra Options:"
    echo "   -h     Print this Help"
    echo "   -p     Clean only the pkg directories"
    echo "   -j     Clean only the junk directories"
    echo "   -d     Clean only the developer directories"
    echo "   -c     Clean only the container directories"
    echo "   -b     Clean only the few basic directories"
    echo "   -a     Automatically start and affirm all Cleanings"
    echo
}

## Config Paths ##

[[ -v XDG_CONFIG_HOME ]] && _xdg_base_config="$XDG_CONFIG_HOME" || _xdg_base_config="$HOME/.config"
_mc_config_dir="$_xdg_base_config/maclean"
_mc_config_file="$_mc_config_dir/maclean.conf"
mkdir -p "$_mc_config_dir"

## Source Generation ##

if [[ ! -f "$_mc_config_file" ]] || ! grep -q "_mc_junk_dirs" "$_mc_config_file"; then
    {
        echo -ne "## maclean conf file ##\n\n"
        echo -ne "## Directories to be considered junk. Additional folders may be added.\n## One path on each line. Please Use Caution. Targets will be deleted.\n\n"
        echo -ne "_mc_junk_dirs=(\n\t~/.adobe\n\t~/.macromedia\n)\n"
    } > "$_mc_config_file"
fi
source "$_mc_config_file"

## Accounting Functions ##

_mc_bytcon() {
    local -i _bytes=$1;
    if [[ $_bytes -lt 1024 ]]; then
        echo -e "Recovered ${_bytes}B\033[0m"
    elif [[ $_bytes -lt 1048576 ]]; then
        echo -e "Recovered $(( _bytes / 1024 ))KiB\033[0m"
    elif [[ $_bytes -lt 1073741824 ]]; then
        echo -e "Recovered $(( _bytes / 1048576 ))MiB\033[0m"
    else
        _bigbytes=$(awk "BEGIN {printf \"%.2f\",${_bytes}/1073741824}")
        echo -e 'Recovered '"$_bigbytes"'GiB\033[0m'
    fi
}

_mc_calcfir() {
    _mc_quicksums=$(du -scb "$@" | tail -n1)
    _mc_quicksums=${_mc_quicksums//[^0-9]/}
}

_mc_calcsec() {
    _mc_quicksums2=$(du -scb "$@" | tail -n1)
    _mc_quicksums2=${_mc_quicksums2//[^0-9]/}
}

_mc_calcdif() {
    if [[ -v _mc_quicksums[@] && -v _mc_quicksums2[@] ]]; then
        _mc_diff=$((${_mc_quicksums[@]} - ${_mc_quicksums2[@]}))
    fi
    _mc_bigdiff+=("$_mc_diff")
    # echo "$_mc_diff"
    _mc_bytcon "$_mc_diff"
}

_mc_calcttl() {
    if [[ -v _mc_bigdiff[@] && ${#_mc_bigdiff[@]} -gt 0 ]]; then
        _mc_tot=0
        for _mc_numz in "${_mc_bigdiff[@]}"; do
            _mc_tot=$((_mc_tot + _mc_numz))
        done
        echo -ne "\033[0;32m\nTotal "
        _mc_bytcon "$_mc_tot" | sed 's/Recovered/&:/g'
    fi
}

## Junk Function ##

_mc_junker() {
    for dir in "${_mc_junk_dirs[@]}"; do
        if [[ -d "${dir}" ]]; then
            echo -ne "\nClean up junk directories (y/N)? "

            read -r response
            if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then

                unset _mc_quicksums _mc_quicksums2
                _mc_calcfir "${_mc_junk_dirs[@]}" >/dev/null 2>&1
                rm -rf "${_mc_junk_dirs[@]}" >/dev/null 2>&1
                _mc_calcsec "${_mc_junk_dirs[@]}" >/dev/null 2>&1
                echo "Done"
                _mc_calcdif
            else
                echo "Skipped"
            fi
            return 0
        fi
    done
}

## Thumbnail Cache ##

_mc_thumbcache() {
    echo -ne "\nClean thumbnail cache of files not accessed for 2 weeks (y/N)? "

    read -r response
    if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
        unset _mc_quicksums _mc_quicksums2
        _mc_calcfir ~/.cache/thumbnails >/dev/null 2>&1
        find ~/.cache/thumbnails -mindepth 1 -type d ! \( -readable -executable \) -prune -o -type f -atime +1 -print0 -exec rm -rf {} + >/dev/null 2>&1
        _mc_calcsec ~/.cache/thumbnails >/dev/null 2>&1
        echo "Done"
        _mc_calcdif
    else
        echo "Skipped"
    fi
}

## $HOME Cache ##

_mc_homecache() {
    echo -ne "\nClean \$HOME cache of files not accessed for 2 weeks (y/N)? "

    read -r response
    if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
        _ign_dirs=(
            ! -path '*/BraveSoftware/*'
            ! -path '*/chromium/*'
            ! -path '*/chroots/*'
            ! -path '*/com.github.tkashkin.gamehub/*'
            ! -path '*/falkon/*'
            ! -path '*/flatpak/*'
            ! -path '*/go-build/*'
            ! -path '*/google-chrome/*'
            ! -path '*/manjaro-tools/*'
            ! -path '*/midori/*'
            ! -path '*/mozilla/*'
            ! -path '*/pacaur/*'
            ! -path '*/pamac/*'
            ! -path '*/paru/*'
            ! -path '*/pikaur/*'
            ! -path '*/pip/*'
            ! -path '*/thunderbird/*'
            ! -path '*/trizen/*'
            ! -path '*/vivaldi/*'
            ! -path '*/yarn/*'
            ! -path '*/yay/*'
        )
        unset _mc_quicksums _mc_quicksums2
        _mc_calcfir ~/.cache >/dev/null 2>&1
        find ~/.cache -mindepth 1 -type d ! \( -readable -executable \) -prune -o "${_ign_dirs[@]}" -type f -atime +14 -print0 -exec rm -rf {} + >/dev/null 2>&1
        _mc_calcsec ~/.cache >/dev/null 2>&1
        echo "Done"
        _mc_calcdif
    else
        echo "Skipped"
    fi
}

## Journal Logs ##

_mc_journlogs() {
    if [[ $(LANG=C journalctl --until=-2w | awk 'NR==1 {print $2; exit}') != "No" ]]; then
        echo -ne "\nClean journal of any logs older than 2 weeks (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/log/journal >/dev/null 2>&1
            journalctl --vacuum-time=2weeks >/dev/null 2>&1
            _mc_calcsec /var/log/journal >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Coredumps ##

_mc_coredumps() {
    if compgen -G "/var/lib/systemd/coredump/*" >/dev/null 2>&1 ; then
        echo -ne "\nClean up ALL existing coredumps of crashes (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/lib/systemd/coredump >/dev/null 2>&1
            sudo rm -rf /var/lib/systemd/coredump/* >/dev/null 2>&1
            _mc_calcsec /var/lib/systemd/coredump >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## SNAP Data ##

_mc_snapdata() {
    if command -v snap >/dev/null 2>&1 ; then
        echo -ne "\nClean old and disabled SNAP revisions (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.snap ~/snap /var/lib/snapd >/dev/null 2>&1

            if ! systemctl is-active --quiet snapd.service && ! systemctl is-active --quiet snapd.socket; then
                echo -ne "\nStart snapd.socket to list and remove SNAPs (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                    systemctl start snapd.socket
                else
                    echo "Skipped"
                fi
            fi
            if systemctl is-active --quiet snapd.service || systemctl is-active --quiet snapd.socket; then
                LANG=C snap list --all | awk '/disabled/{print $1, $3}' | while read -r snapname revision; do
                    sudo snap remove "$snapname" --revision="$revision"
                done
                _mc_calcsec ~/.snap ~/snap /var/lib/snapd >/dev/null 2>&1
                echo "Done"
                _mc_calcdif
            fi
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.snap || -d ~/snap || -d /var/lib/snapd ]]; then
        echo -ne "\nClean up ALL SNAP application data (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.snap ~/snap /var/lib/snapd >/dev/null 2>&1
            if [[ -d /var/lib/snapd ]]; then
                sudo rm -rf /var/lib/snapd >/dev/null 2>&1
            fi
            rm -rf ~/.snap ~/snap >/dev/null 2>&1;
            _mc_calcsec ~/.snap ~/snap /var/lib/snapd >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Flatpak Data ##

_mc_flatdata() {
    if command -v flatpak >/dev/null 2>&1 ; then
        echo -ne "\nClean unused Flatpak REFs and application data (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.local/share/flatpak /etc/flatpak/installations.d /var/lib/flatpak >/dev/null 2>&1

            if [[ -d ~/.local/share/flatpak ]]; then
                echo -ne "\nClean user flatpaks (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                    flatpak uninstall --unused --user
                    flatpak repair --user
                else
                    echo -ne "Skipped\n"
                fi
            fi

            if [[ -d /etc/flatpak/installations.d || -d /var/lib/flatpak ]]; then
                echo -ne "\nClean system flatpaks (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then

                    flatpak uninstall --unused
                    sudo flatpak repair
                else
                    echo -e "Skipped\n"
                fi
            fi

            if [[ -d ~/.var/app ]]; then
                echo -e "\nClear flatpak application data (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                    flatpak uninstall --delete-data
                else
                    echo -e "Skipped\n"
                fi
            fi

            if compgen -G "/var/tmp/flatpak-cache-*" >/dev/null 2>&1 ; then
                echo -ne "\nClear flatpak cache (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                    sudo rm -rf /var/tmp/flatpak-cache-* >/dev/null 2>&1
                else
                    echo -e "Skipped\n"
                fi
            fi
            _mc_calcsec ~/.local/share/flatpak /etc/flatpak/installations.d /var/lib/flatpak >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.var/app || -d ~/.cache/flatpak || -d ~/.local/share/flatpak || -d /var/lib/flatpak ]] || compgen -G "/var/tmp/flatpak-cache-*" >/dev/null 2>&1 ; then
        echo -ne "\nClean up ALL Flatpak application data (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.local/share/flatpak /etc/flatpak/installations.d /var/lib/flatpak >/dev/null 2>&1
            sudo rm -rf /var/lib/flatpak /var/tmp/flatpak-cache-* >/dev/null 2>&1
            rm -rf ~/.var/app ~/.local/share/flatpak ~/.cache/flatpak >/dev/null 2>&1
            _mc_calcsec ~/.local/share/flatpak /etc/flatpak/installations.d /var/lib/flatpak >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Go Cache ##

_mc_gocache() {
    if command -v go >/dev/null 2>&1 ; then
        echo -ne "\nClean up the local go build cache in \$HOME (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/go/pkg ~/.cache/go-build >/dev/null 2>&1
            if [[ -d ~/go/pkg && -n "$(find ~/go/pkg -mindepth 1)" ]]; then
                echo -ne "\nClean ALL module download cache as well (y/N)? "

                read -r response
                if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                    go clean -modcache
                else
                    echo -e "Skipped\n"
                fi
            fi
            go clean -cache
            _mc_calcsec ~/go/pkg >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.cache/go-build || -d ~/go ]]; then
        echo -ne "\nClean ALL go data from \$HOME (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/go/pkg ~/.cache/go-build >/dev/null 2>&1
            rm -rf ~/.cache/go-build >/dev/null 2>&1
            rm -rf ~/go >/dev/null 2>&1
            _mc_calcsec ~/go/pkg ~/.cache/go-build >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Java Cache ##

_mc_javacache() {
    if [[ -d ~/.java/deployment/cache || -d ~/.config/java/deployment/cache ]]; then
        echo -ne "\nClean ALL the java cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.java/deployment/cache ~/.config/java/deployment/cache >/dev/null 2>&1
            rm -rf ~/.java/deployment/cache >/dev/null 2>&1
            rm -rf ~/.config/java/deployment/cache >/dev/null 2>&1
            _mc_calcsec ~/.java/deployment/cache ~/.config/java/deployment/cache >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## npm Cache ##

_mc_npmcache() {
    if command -v npm >/dev/null 2>&1 ; then
        echo -ne "\nClean unneeded data and verify integrity of npm packages (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.npm >/dev/null 2>&1
            echo -ne "\nClean ALL data from npm cache as well (y/N)? "

            read -r response
            if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                npm cache clean --force
            else
                echo -e "Skipped\n"
            fi
            npm cache verify ;
            _mc_calcsec ~/.npm >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.npm ]]; then
        echo -ne "\nClean ALL items from the npm cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.npm >/dev/null 2>&1
            rm -rf ~/.npm >/dev/null 2>&1
            _mc_calcsec ~/.npm >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Yarn Cache ##

_mc_yarncache() {
    if command -v yarn >/dev/null 2>&1 ; then
        echo -ne "\nClean the yarn cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cache/yarn ~/.yarncache >/dev/null 2>&1
            yarn cache clean --mirror
            _mc_calcsec ~/.cache/yarn ~/.yarncache >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.cache/yarn || -d ~/.yarncache ]]; then
        echo -ne "\nClean ALL items from the yarn cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cache/yarn ~/.yarncache >/dev/null 2>&1
            rm -rf ~/.cache/yarn >/dev/null 2>&1
            rm -rf ~/.yarncache >/dev/null 2>&1
            _mc_calcsec ~/.cache/yarn ~/.yarncache >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Rust Cargo ##

_mc_rustcargo() {
    if command -v cargo >/dev/null 2>&1 ; then
        echo -ne "\nClean the rust cargo cache of all crate sources (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cargo >/dev/null 2>&1
            if cargo -Z gc clean gc >/dev/null 2>&1 || rm -rf ~/.cargo/registry/{cache,src}; then
                _mc_calcsec ~/.cargo >/dev/null 2>&1
                echo "Done"
                _mc_calcdif
            fi
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.cargo ]]; then
        echo -ne "\nClean ALL items from the rust cargo cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cargo >/dev/null 2>&1
            rm -rf ~/.cargo >/dev/null 2>&1
            _mc_calcsec ~/.cargo >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Ruby Gems ##

_mc_rubygems() {
    if command -v gem >/dev/null 2>&1 && [[ -d ~/.local/share/gem ]] ; then
        echo -ne "\nClean up old versions of local user ruby gems (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.local/share/gem >/dev/null 2>&1
            echo -ne "\nClean sources data from gem cache as well (y/N)? "

            read -r response
            if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                gem sources -c
            else
                echo -e "Skipped\n"
            fi
            gem cleanup
            _mc_calcsec ~/.local/share/gem >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.local/share/gem ]]; then
        echo -ne "\nClean up ALL local user ruby gems and data (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.local/share/gem >/dev/null 2>&1
            rm -rf ~/.local/share/gem >/dev/null 2>&1
            _mc_calcsec ~/.local/share/gem >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## pip Cache ##

_mc_pipcache() {
    if command -v pip >/dev/null 2>&1 ; then
        echo -ne "\nClean ALL items from the pip cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cache/pip >/dev/null 2>&1
            pip cache purge
            _mc_calcsec ~/.cache/pip >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d ~/.cache/pip ]]; then
        echo -ne "\nClean ALL items from the pip cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir ~/.cache/pip >/dev/null 2>&1
            rm -rf ~/.cache/pip >/dev/null 2>&1
            _mc_calcsec ~/.cache/pip >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## pkgfile Data ##

_mc_pkgfiledata() {
    if ! command -v pkgfile >/dev/null 2>&1 && [[ -d /var/cache/pkgfile ]] ; then
        echo -ne "\nClean ALL items from the pkgfile cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/cache/pkgfile >/dev/null 2>&1
            sudo rm -rf /var/cache/pkgfile >/dev/null 2>&1
            _mc_calcsec /var/cache/pkgfile >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## PackageKit Data ##

_mc_packagekitdata() {
    if command -v pkcon >/dev/null 2>&1 ; then
        echo -ne "\nClean ALL items from the PackageKit cache (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/cache/PackageKit /var/lib/PackageKit >/dev/null 2>&1
            sudo rm -rf /var/cache/PackageKit >/dev/null 2>&1
            sudo pkcon refresh force -c -1
            _mc_calcsec /var/cache/PackageKit /var/lib/PackageKit >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    elif [[ -d /var/cache/PackageKit || -d /var/lib/PackageKit ]]; then
        echo -ne "\nClean up PackageKit cache and ALL data (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/cache/PackageKit /var/lib/PackageKit >/dev/null 2>&1
            sudo rm -rf /var/{cache,lib}/PackageKit >/dev/null 2>&1
            _mc_calcsec /var/cache/PackageKit /var/lib/PackageKit >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Pamac Data ##

_mc_pamacdata() {
    if ! command -v pamac >/dev/null 2>&1 && [[ -d /var/tmp/pamac || -d /var/tmp/pamac-build-"$USER" ]]; then
        echo -ne "\nClean up leftover Pamac temporary files (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/tmp/pamac /var/tmp/pamac-build-"$USER" >/dev/null 2>&1
            sudo rm -rf /var/tmp/pamac /var/tmp/pamac-build-"$USER" >/dev/null 2>&1
            _mc_calcsec /var/tmp/pamac /var/tmp/pamac-build-"$USER" >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## AUR Helper Cache(s) ##

_mc_aurhelpers() {
    echo -ne "\nClean AUR Helper cache of ALL diff and package build files (y/N)? "

    read -r response
    if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
        _helpers=(
            pacaur
            pamac
            paru
            pikaur
            trizen
            yay
        )
        unset _mc_quicksums _mc_quicksums2
        _mc_calcfir ~/.cache/pacaur ~/.cache/paru ~/.cache/pikaur ~/.cache/trizen ~/.cache/yay /var/tmp/pamac-build-"$USER" >/dev/null 2>&1
        for _ahelper in "${_helpers[@]}"; do
            if command -v "$_ahelper" >/dev/null 2>&1 ; then
                if [[ $_ahelper = "paru" ]]; then
                    yes | LC_ALL=C $_ahelper -Sccda >/dev/null 2>&1
                elif [[ $_ahelper = "pacaur" || $_ahelper = "pikaur" || $_ahelper = "trizen" || $_ahelper = "yay" ]]; then
                    yes | LC_ALL=C $_ahelper -Scca >/dev/null 2>&1
                elif [[ $_ahelper = "pamac" ]]; then
                    yes | LC_ALL=C $_ahelper clean -b >/dev/null 2>&1
                fi
            fi
        done
        _mc_calcsec ~/.cache/pacaur ~/.cache/paru ~/.cache/pikaur ~/.cache/trizen ~/.cache/yay /var/tmp/pamac-build-"$USER" >/dev/null 2>&1
        echo "Done"
        _mc_calcdif
    else
        echo "Skipped"
    fi
}

## Package Cache and Repos ##

_mc_pacmanunused() {
    echo -ne "\nClean cache of uninstalled packages and unused repositories (y/N)? "

    read -r response
    if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
        unset _mc_quicksums _mc_quicksums2
        _mc_calcfir /var/cache/pacman /var/lib/pacman >/dev/null 2>&1
        yes | LC_ALL=C sudo pacman -Sc >/dev/null 2>&1
        _mc_calcsec /var/cache/pacman /var/lib/pacman  >/dev/null 2>&1
        echo "Done"
        _mc_calcdif
    else
        echo "Skipped"
    fi
}

_mc_pacmancache() {
    if command -v paccache >/dev/null 2>&1 && [[ $(LANG=C paccache -dk2 | awk 'NR==1 {print $2; exit}') != "no" ]]; then
        echo -ne "\nClean installed package cache of all but 2 latest instances (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            unset _mc_quicksums _mc_quicksums2
            _mc_calcfir /var/cache/pacman/pkg >/dev/null 2>&1
            paccache -rvk2
            _mc_calcsec /var/cache/pacman/pkg >/dev/null 2>&1
            echo "Done"
            _mc_calcdif
        else
            echo "Skipped"
        fi
    fi
}

## Orphan Packages ##

_mc_orphans() {
    if [[ $(pacman -Qdtq | head -c1 | wc -c) != 0 ]]; then
        echo -ne "\nClean out all orphan packages (y/N)? "

        read -r response
        if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
            echo -ne "\nThe following will be uninstalled:\n$(pacman -Qdtq | pacman -Rsp -)\n\nContinue with removal (y/N)? "

            read -r response
            if [[ $response =~ ^(yes|y|Y|Yes)$ ]]; then
                unset _mc_diff _mc_quicksums _mc_quicksums2
                read -r _mc_diff < <(pacman -Qdtq | LANG=C sudo pacman -Rns --noconfirm - | tee | awk '/Total Removed/ { print int($4*1048576) }') || EXIT_CODE=$? ;
                echo "Done"
                _mc_calcdif
            else
                echo "Skipped"
            fi
        else
            echo "Skipped"
        fi
    fi
}

## pacnew/pacsave Files ##

_mc_pacnews() {
    if command -v pacdiff >/dev/null 2>&1 && [[ $(pacdiff -o | head -c1 | wc -c) != 0 ]]; then
        echo -ne "\033[0;31m\nAttention! Manual intervention required for the following files: \n\033[0m"

        pacdiff -o
    fi
}

## Container Functs ##

_mc_confuncts() {
    _mc_snapdata

    _mc_flatdata
}

## Developer Functs ##

_mc_devfuncts() {
    _mc_gocache

    _mc_javacache

    _mc_npmcache

    _mc_yarncache

    _mc_rustcargo

    _mc_rubygems

    _mc_pipcache
}

## Pacman Functs ##

_mc_pacmanfuncts() {
    ## Check for pacman before operations below ##
    if command -v pacman >/dev/null 2>&1; then

        _mc_aurhelpers

        _mc_pacmanunused

        _mc_pacmancache

        _mc_orphans

        _mc_pacnews

    fi
}

## Default All ##

if [[ "$#" == 0 ]]; then
    set -- -jbcdp
fi

## Process Options ##

while getopts ":abcdjph" option; do
    case $option in
        a) # automatic mode
            sudo -k
            echo -e "\nPerforming all cleanings automatically."
            echo -e "\nThis is the final warning.\n"
            if sudo -p "To continue enter the password for %p: " true; then
                echo ""
                yes | $0 ;
            fi
            exit ;;
        b) # clean basics
            _mc_junker
            _mc_homecache
            _mc_thumbcache
            _mc_journlogs
            _mc_coredumps
            ;;
        c) # clean containers
            _mc_confuncts
            ;;
        d) # clean devs
            _mc_devfuncts
            ;;
        j) # clean junk
            _mc_junker
            ;;
        p) # clean pkg-related
            _mc_pkgfiledata
            _mc_packagekitdata
            _mc_pamacdata
            _mc_pacmanfuncts
            ;;
        h) # display Help
            _mc_help
            exit ;;
        \?) # invalid option
            echo "Error: Invalid option"
            _mc_help
            exit ;;
    esac
done

## Show Total ##

_mc_calcttl

## Exit Script ##

echo ""
exit 0
